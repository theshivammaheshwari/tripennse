{"ast":null,"code":"import { mapEasingToNativeEasing, statsBuffer, activeAnimations } from 'motion-dom';\nfunction startWaapiAnimation(element, valueName, keyframes) {\n  let {\n    delay = 0,\n    duration = 300,\n    repeat = 0,\n    repeatType = \"loop\",\n    ease = \"easeInOut\",\n    times\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const keyframeOptions = {\n    [valueName]: keyframes\n  };\n  if (times) keyframeOptions.offset = times;\n  const easing = mapEasingToNativeEasing(ease, duration);\n  /**\n   * If this is an easing array, apply to keyframes, not animation as a whole\n   */\n  if (Array.isArray(easing)) keyframeOptions.easing = easing;\n  if (statsBuffer.value) {\n    activeAnimations.waapi++;\n  }\n  const animation = element.animate(keyframeOptions, {\n    delay,\n    duration,\n    easing: !Array.isArray(easing) ? easing : \"linear\",\n    fill: \"both\",\n    iterations: repeat + 1,\n    direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\"\n  });\n  if (statsBuffer.value) {\n    animation.finished.finally(() => {\n      activeAnimations.waapi--;\n    });\n  }\n  return animation;\n}\nexport { startWaapiAnimation };","map":{"version":3,"names":["mapEasingToNativeEasing","statsBuffer","activeAnimations","startWaapiAnimation","element","valueName","keyframes","delay","duration","repeat","repeatType","ease","times","arguments","length","undefined","keyframeOptions","offset","easing","Array","isArray","value","waapi","animation","animate","fill","iterations","direction","finished","finally"],"sources":["/Users/shivammaheshwari/Documents/GitHub/try/node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs"],"sourcesContent":["import { mapEasingToNativeEasing, statsBuffer, activeAnimations } from 'motion-dom';\n\nfunction startWaapiAnimation(element, valueName, keyframes, { delay = 0, duration = 300, repeat = 0, repeatType = \"loop\", ease = \"easeInOut\", times, } = {}) {\n    const keyframeOptions = { [valueName]: keyframes };\n    if (times)\n        keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease, duration);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */\n    if (Array.isArray(easing))\n        keyframeOptions.easing = easing;\n    if (statsBuffer.value) {\n        activeAnimations.waapi++;\n    }\n    const animation = element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n    if (statsBuffer.value) {\n        animation.finished.finally(() => {\n            activeAnimations.waapi--;\n        });\n    }\n    return animation;\n}\n\nexport { startWaapiAnimation };\n"],"mappings":"AAAA,SAASA,uBAAuB,EAAEC,WAAW,EAAEC,gBAAgB,QAAQ,YAAY;AAEnF,SAASC,mBAAmBA,CAACC,OAAO,EAAEC,SAAS,EAAEC,SAAS,EAAmG;EAAA,IAAjG;IAAEC,KAAK,GAAG,CAAC;IAAEC,QAAQ,GAAG,GAAG;IAAEC,MAAM,GAAG,CAAC;IAAEC,UAAU,GAAG,MAAM;IAAEC,IAAI,GAAG,WAAW;IAAEC;EAAO,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACvJ,MAAMG,eAAe,GAAG;IAAE,CAACX,SAAS,GAAGC;EAAU,CAAC;EAClD,IAAIM,KAAK,EACLI,eAAe,CAACC,MAAM,GAAGL,KAAK;EAClC,MAAMM,MAAM,GAAGlB,uBAAuB,CAACW,IAAI,EAAEH,QAAQ,CAAC;EACtD;AACJ;AACA;EACI,IAAIW,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EACrBF,eAAe,CAACE,MAAM,GAAGA,MAAM;EACnC,IAAIjB,WAAW,CAACoB,KAAK,EAAE;IACnBnB,gBAAgB,CAACoB,KAAK,EAAE;EAC5B;EACA,MAAMC,SAAS,GAAGnB,OAAO,CAACoB,OAAO,CAACR,eAAe,EAAE;IAC/CT,KAAK;IACLC,QAAQ;IACRU,MAAM,EAAE,CAACC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,GAAGA,MAAM,GAAG,QAAQ;IAClDO,IAAI,EAAE,MAAM;IACZC,UAAU,EAAEjB,MAAM,GAAG,CAAC;IACtBkB,SAAS,EAAEjB,UAAU,KAAK,SAAS,GAAG,WAAW,GAAG;EACxD,CAAC,CAAC;EACF,IAAIT,WAAW,CAACoB,KAAK,EAAE;IACnBE,SAAS,CAACK,QAAQ,CAACC,OAAO,CAAC,MAAM;MAC7B3B,gBAAgB,CAACoB,KAAK,EAAE;IAC5B,CAAC,CAAC;EACN;EACA,OAAOC,SAAS;AACpB;AAEA,SAASpB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}